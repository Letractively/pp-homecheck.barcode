<?php

/**
  *Implements hook_menu()
  */
 function barcode_menu(){
 	$items['barcode-page'] = array(
 		'page callback' =>'barcode_page',
 		'access arguments' => array('access content'),
 		'type' => MENU_CALLBACK,
 	);
 	return $items;
 
 
 }
 /**
  * 
  * Function that loads the appropriate pages for this module
  */
 function barcode_page()
 {
 	//allows us to use the civicrm api
 	$civicrm_root = "sites/all/modules/civicrm";
	require_once $civicrm_root . '/civicrm.config.php';
	require_once $civicrm_root . '/api/api.php';
	
	//path for style sheet
	$style_sheet_path = "sites/all/modules/barcode/pages/styles.css";
	
	//should hold the name of the custom barcode field in your database
	$barcode_field = "custom_12";
	$date_field = "custom_13";
	$hours_field = "custom_14";
	
	//allows us to query drupal database
	require_once "includes/database.mysql-common.inc";
	
	//sign in as guest
	if(array_key_exists("guest",$_POST)){
		
		//loads the background image and style sheet
		
		echo('<body style = "background:url(sites/all/modules/barcode/pages/background.jpg) no-repeat center center fixed; text-align:center;" >');
		
		if(array_key_exists("phone",$_POST)){
			$name = $_POST['name'];
			$phone = $_POST['phone'];
			$result = guest_lookup($name,$phone);
			if($result){
				$barcode = $result[$barcode_field];
				
				//for admin to activate civi events
				if($result['first_name']== "ADMIN"){
					//get all inactive drupal events
					$events = get_inactive_events();
				}
				//otherwise, just get today's events
				else{
					$events = event_lookup(date("Y-m-d"));
				}
 				
				include_once("pages/home.php");
				
			}
			else echo ("<h1>Sorry, there was a problem with your login. Please try again.</h1>");
			
	
		}
		else{
			
			include_once("pages/guest.php"); 
			
		}
		echo("</body>");
	}
	
	//if a barcode has been submitted, look up the membership record
	elseif(array_key_exists("barcode",$_POST)){
		
		//background image for all pages
		echo('<body style = "background:url(sites/all/modules/barcode/pages/background.jpg) no-repeat center center fixed; text-align:center;" >');
		
		$barcode = $_POST['barcode'];
		if($barcode == "") $result = false;
		else $result = barcode_lookup($barcode, $barcode_field);
		
		if($result){
			
			//if the user is checking in for an event, load the checkin page
			if(array_key_exists("event",$_POST)){
				$nid = $_POST['event'];
				$event = get_event($nid);
				$eventID = $event['id'];
				if($event) include_once("pages/checkin.php");
				else echo("ERROR: could not look up this event<br/>");
			}
			
			//if the user is logging volunteer hours, load the volunteer page
			elseif(array_key_exists("volunteer",$_POST)){
				include_once("pages/volunteer.php");
				
			}
			
			//user submitted hours
			elseif(array_key_exists("hours",$_POST)){
				
				$hours = $_POST['hours'];
				echo("<h3 align = 'center'>".$hours." HOURS SUBMITTED </h3>");
				submit_hours($result,$hours,$date_field,$hours_field);
				
				
				$events = event_lookup(date("Y-m-d"));
				include ("pages/home.php");
				
			}
			
			//otherwise, load the home page
			else{
				
				$events = event_lookup(date("Y-m-d"));
 				include_once("pages/home.php");
			}
		}
		//barcode lookup failed
		else{
			echo("<br/><h1 style = 'text-align:center;'>Sorry, we do not have a membership record for this person</h1>");
			echo("<script>var t = setTimeout(\"window.location = 'barcode-page'\",5000)</script>");
		}
		
		echo("</body>");
	}
	
	
	//otherwise, show the welcome page
	else{
		include_once("pages/welcome.php");
	}
	
	
 }
 
 
 
 /**
  * 
  * Returns the contact with the matching barcode value in the 
  * custom data field
  * 
  * @param string $barcode the barcode to look up
  * @param string $barcode_field the name of the custom field corresponding to the barcode data
  */
 function barcode_lookup($barcode, $barcode_field){
	
 	
	$params = array( 
  		$barcode_field => $barcode,
		'return.first_name' => 1,
		'return.last_name' => 1,
		'return.email' => 1,
		'return.phone' => 1,
		'return.custom_12' => 1,
		'return.contact_id' =>1,
		'version' => 3
	);


  	$result = civicrm_api( 'contact','get',$params );
	$contacts = $result['values'];
	
	//ensure unique result
	if(sizeof($contacts) == 1){
		foreach($contacts as $c){	
			$contact = $c;
		}
	}
	//return false if no or multiple entries found
	else{
		return false;
	}
	
  	return $contact;
}
/**
 * Returns array of events happening on a given date
 * 
 * @param $date in format "YYYY-MM-DDTHH:MM:SS" where T is constant,
 *        eg. 2012-01-15T12:30:00 would return all events starting at 12:30 on Jan. 15th 2012
 *     you can exclude any set of the most specific date/time parameters 
 *        eg. 2012-01-15 will return all events with start times on Jan. 15th 2012,
 *            2012-01 will return all events in January 2012, etc.
 */
function event_lookup($date){
	
	//get all field_date_value entires for the given date, which each correspond to a drupal event node 
	$result = db_query("SELECT d.nid, d.field_date_value FROM {content_field_date} d WHERE d.field_date_value LIKE '%s%%'",$date);
	
	$events = array();
	
 	 while ($node = db_fetch_object($result)) {
 	 	
 	 	$nid = $node->nid;
 	 	
 	 	//get the title corresponding to each event date
 	 	$title_result = db_query("SELECT n.title FROM {node} n WHERE n.nid = '%s'", $nid);
 	 	$title_node = db_fetch_object($title_result);

 	 	
 	 	$e = array();
 	 	$e['title'] = $title_node->title;
 	 	$e['id'] = $nid;
 	 	$e['event_start'] = str_replace("T"," ",$node->field_date_value);
 	 	$events[] = $e;
 	 }
 	 
 	 return $events;

		
}
function get_event($nid){
		
		//nid is stored in the "summary" field of civievents
		$params = array(
			'summary' => $nid,
			'return.title' => 1,
			'return.is_monetary' =>1,
			'version' => 3
		);
		$result = civicrm_api('event','get',$params);
		$event = $result['values'];
		
		//unique event was found, return it
		if(sizeof($event) == 1){
			foreach($event as $e)
				return $e;
		}
		//civievent version of drupal event has not been created yet, so create it
		elseif (!$event){
			return create_event($nid,date("Y-m-d"));

		}
		//there was some other problem
		else{
			
			return false;
		}
		
		
}

/**
 * 
 * Returns all drupal events that have not yet been converted to civiEvents
 */
function get_inactive_events(){
	
	$type = "event";
	$result = db_query("SELECT n.nid, n.title, n.created FROM {node} n WHERE n.type= '%s'", $type);
	
	$events = array();
	
	while ($node = db_fetch_object($result)) {
		
		if(!is_active($node->nid)){
	 		$e = array();
	 		$e['title'] = $node->title;
	 		$e['id'] = $node->nid;
	 		$e['event_start'] = "Created ".date("M j, Y",$node->created);
	 		$events[] = $e;
		}
	 	
	 }
	 return $events;
	
}


/**
 * Returns true if an civiEvent corresponding to the drupal node ID has been created
 * returns false otherwise
 * 
 */
function is_active($nid){
	$params = array(
			'summary' => $nid,
			'return.title' => 1,
			'version' => 3
		);
		$result = civicrm_api('event','get',$params);
		$event = $result['values'];
		
		//unique event was found, return true
		if(sizeof($event) == 1)
			return true;
			
		//civievent version of drupal event has not been created yet, return false
		else
			return false;
		
	
	
}
/**
 * Creates a new CiviEvent from a corresponding drupal event node
 * 
 * @param $nid the node ID of the desired event node in the drupal node table 
 * @param $date the start date of the desired instance of this event
 */
function create_event($nid, $date){
	//get the drupal event node
	$result = db_query("SELECT n.nid, n.title FROM {node} n WHERE n.nid = '%s'", $nid);
	$node = db_fetch_object($result);
	
	//get the dateTime for the occurance of this event
	$date_result = db_query("SELECT d.field_date_value FROM {content_field_date} d WHERE d.field_date_value LIKE '%s%%' AND d.nid = '%s'" ,$date,$nid);
 	$date = db_fetch_object($date_result);
 	
 	//need to check this condition for the admin page, since the event is not always occuring on the current date
 	if($date){
 	
 		$s = $date->field_date_value;
 		$s = str_replace(array("-",":"," ","T"),"",$s);
 	}
 	//just use the current dateTime if creating an event from the admin page
 	else
 		$s = date("Y-m-d h:i:s");
	
 	//determine the event type
 	$term_result = db_query("SELECT t.tid FROM {term_node} t WHERE t.nid = '%s'", $nid);
	$tnode = db_fetch_object($term_result);
	$tid = $tnode->tid;
	
	$term_data_result = db_query("SELECT t.name FROM {term_data} t WHERE t.tid = '%s'", $tid);
	$dataNode = db_fetch_object($term_data_result);
	$type = ucfirst($dataNode->name);
	
	$params = array(
		'label' => $type,
 		'return.value' => 1,
		'version' => 3 
 	);
 	$result = civicrm_api('OptionValue','get',$params);
 	$data = $result['values'];
 	foreach($data as $d){
 		$typeID = $d['value'];
 	}
 	
 	//create the event
 	$params = array(
 		'summary' => $nid,
 		'title' => $node->title,
 		'start_date' => $s,
 		'event_type_id' => 4,
 		'participant_listing_id'=> 3,
 		'is_public' => 1,
 		'is_active' => 1,
 		'version' => 3
 	);
 	
 	$result = civicrm_api('event','create',$params);
 	$eventID = $result['id'];
 	
 	if($result)
 		return array("event_title"=>$node->title, "id"=>$eventID);
 	
 	else return false;
	
	
	
	
}
/**
 * Checks the civi event contact table for a contact with matching first name and phone number
 * Returns the unique contact if found, creates and returns a guest contact otherwise
 * 
 */
function guest_lookup($name, $phone){
	
	//strip all characters and space from phone number except digits
	$phone = str_replace(array(")","(","-"," "),"",$phone) . "0000000000";
	$phone = substr($phone,0,3)."-".substr($phone,3,3)."-".substr($phone,6,4);
	//lookup contact by first name and phone number
	$params = array( 
  		'first_name' => $name,
		'phone'		=> $phone,
		'return.first_name' => 1,
		'return.last_name' => 1,
		'return.email' => 1,
		'return.phone' => 1,
		'return.custom_12' => 1,
		'return.contact_id' =>1,
		'return.phone' =>1,
		'version' => 3
	);


  	$result = civicrm_api( 'contact','get',$params );
  	
	$contacts = $result['values'];
	
	//if contact found, return it
	if(sizeof($contacts) == 1){
		foreach($contacts as $c){	
			$contact = $c;
		}
	
  		return $contact;
	}
	//otherwise, create a new contact
	else{
		
		//last name will be GUEST, barcode will be phone number
		$params = array(
			'first_name' => $name,
			'last_name' => "GUEST",
			'contact_type' => 'Individual',
			'custom_12' => $phone,
			'version' => 3
		);
		
		$result = civicrm_api('contact','create',$params);
		
		if($result){
			foreach($result['values'] as $v){
				$contact = $v;
			}
		
			//create a phone record for the newly created contact
			$params = array(
				'contact_id' => $contact['id'],
				'location_id' =>1,
				'is_primary' => 1,
				'phone_type_id' => 1,
				'phone' => $phone,
				'version' => 3
			);
			
			$phone_result = civicrm_api('phone','create',$params);
			
			//create a contact array to return so the other pages can use it
			$contact = array(
					'contact_id' => $contact['id'],
					'first_name'=>$contact['first_name'],
					'last_name'=>$contact['last_name'],
					'custom_12' => $phone,
					'phone'=> $phone,
			
			);
			return $contact;
		
		}
		
		else return false;
		
		
		
	}

	
}
/**
 * Creates a volunteer record for the given contact using the current date and the given number of hours
 * 
 */
function submit_hours($contact,$hours,$date_field,$hours_field){
	

	$params = array(
		'id' => $contact['contact_id'],
		$date_field => date("Y-m-d"),
		$hours_field => $hours,
		'version' => 3
		
	
	);
	$result = civicrm_api('contact','update',$params);
	return $result;
	
}

 ?>